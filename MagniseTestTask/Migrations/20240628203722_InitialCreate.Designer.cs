// <auto-generated />
using System;
using FintachartsApi.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FintachartsApi.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240628203722_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FintachartsApi.Models.Instrument", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("baseCurrency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kind")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("tickSize")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.ToTable("Instruments");
                });

            modelBuilder.Entity("FintachartsApi.Models.InstrumentValuesTimely", b =>
                {
                    b.Property<float>("c")
                        .HasColumnType("real");

                    b.Property<float>("h")
                        .HasColumnType("real");

                    b.Property<Guid>("instrumentid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("l")
                        .HasColumnType("real");

                    b.Property<float>("o")
                        .HasColumnType("real");

                    b.Property<DateTime>("t")
                        .HasColumnType("datetime2");

                    b.Property<int>("v")
                        .HasColumnType("int");

                    b.HasIndex("instrumentid");

                    b.ToTable("InstrumentsValuesTimely");
                });

            modelBuilder.Entity("FintachartsApi.Models.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Instrumentid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("defaultOrderSize")
                        .HasColumnType("int");

                    b.Property<string>("exchange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Instrumentid");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("FintachartsApi.Models.WebSocketMessage", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("instrumentalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("instrumentid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("kinds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("provider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("subscribe")
                        .HasColumnType("bit");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("instrumentid");

                    b.ToTable("WebSocketMessages");
                });

            modelBuilder.Entity("FintachartsApi.Models.InstrumentValuesTimely", b =>
                {
                    b.HasOne("FintachartsApi.Models.Instrument", "instrument")
                        .WithMany()
                        .HasForeignKey("instrumentid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("instrument");
                });

            modelBuilder.Entity("FintachartsApi.Models.Provider", b =>
                {
                    b.HasOne("FintachartsApi.Models.Instrument", "Instrument")
                        .WithMany("providers")
                        .HasForeignKey("Instrumentid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instrument");
                });

            modelBuilder.Entity("FintachartsApi.Models.WebSocketMessage", b =>
                {
                    b.HasOne("FintachartsApi.Models.Instrument", "instrument")
                        .WithMany("webSocketMessages")
                        .HasForeignKey("instrumentid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("instrument");
                });

            modelBuilder.Entity("FintachartsApi.Models.Instrument", b =>
                {
                    b.Navigation("providers");

                    b.Navigation("webSocketMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
